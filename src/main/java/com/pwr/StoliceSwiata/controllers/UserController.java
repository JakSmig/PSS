package com.pwr.StoliceSwiata.controllers;

import com.pwr.StoliceSwiata.Repositories.UserRepository;
import com.pwr.StoliceSwiata.dbSchema.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Base64;
import java.util.Calendar;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/add")
    public @ResponseBody ResponseEntity<String> addUser(@RequestParam String username, @RequestParam String password, @RequestParam String email){
        if(userRepository.findByEmail(email).size()>0){
            return new ResponseEntity<String>("Email already used", HttpStatus.CONFLICT);
        }
        if(userRepository.findByUsername(username).size()>0){
            return new ResponseEntity<String>("User already exists", HttpStatus.CONFLICT);
        }
        User newUser = new User();
        newUser.setName(username);
        newUser.setPassword(password);
        newUser.setEmail(email);
        userRepository.save(newUser);
        return new ResponseEntity<String>("User added", HttpStatus.OK);
    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/login")
    public @ResponseBody ResponseEntity<String> loginUser(@RequestParam String email, @RequestParam String password) {
        System.out.println("login: " + email + "  " + password);
        List<User> queryResult = userRepository.findByEmailAndPassword(email, password);
        if(queryResult.size() == 1){
            Calendar calInst = Calendar.getInstance();
            User logUser = queryResult.get(0);

            String s = logUser.getId() + "|" + calInst.getTimeInMillis();
            String token = Base64.getUrlEncoder().encodeToString(s.getBytes());

            logUser.setSessiontoken(token);
            userRepository.save(logUser);

            return new ResponseEntity<String>(token, HttpStatus.OK);
        }
        else{
            System.out.println("No user found");
            return new ResponseEntity<String>("No user found", HttpStatus.BAD_REQUEST);
        }

    }
}
